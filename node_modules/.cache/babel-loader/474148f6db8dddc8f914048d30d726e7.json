{"ast":null,"code":"import _slicedToArray from \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    }; // TODO: set initial state\n\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"rando\",\n    value: function rando() {\n      return Math.random() >= this.props.chanceLightOn;\n    }\n    /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  }, {\n    key: \"createBoard\",\n    value: function createBoard() {\n      var _this2 = this;\n\n      var board = Array(this.props.nrows).fill().map(function (_) {\n        return Array(_this2.props.ncols).fill().map(function (_) {\n          return _this2.rando();\n        });\n      });\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      //this.setState({ board, hasWon });\n\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      for (var i = 0; i < this.props.nrows;) {\n        return React.createElement(\"table\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 94,\n            columnNumber: 7\n          }\n        });\n      } // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","Math","random","chanceLightOn","Array","nrows","fill","map","_","ncols","rando","coord","split","Number","y","x","flipCell","i","defaultProps"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AACA,OAAO,aAAP;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BMC,K;;;AAQJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,KADG;AAEXC,MAAAA,KAAK,EAAE,MAAKC,WAAL;AAFI,KAAb,CAFiB,CAOjB;;AAPiB;AAQlB;;;;4BAEO;AACN,aAAOC,IAAI,CAACC,MAAL,MAAiB,KAAKN,KAAL,CAAWO,aAAnC;AACD;AAED;;;;kCAEc;AAAA;;AACZ,UAAIJ,KAAK,GAAGK,KAAK,CAAC,KAAKR,KAAL,CAAWS,KAAZ,CAAL,CAAwBC,IAAxB,GAA+BC,GAA/B,CAAmC,UAAAC,CAAC;AAAA,eAC9CJ,KAAK,CAAC,MAAI,CAACR,KAAL,CAAWa,KAAZ,CAAL,CAAwBH,IAAxB,GAA+BC,GAA/B,CAAmC,UAAAC,CAAC;AAAA,iBAAI,MAAI,CAACE,KAAL,EAAJ;AAAA,SAApC,CAD8C;AAAA,OAApC,CAAZ;AAEA,aAAOX,KAAP;AACD;AAID;;;;oCAEgBY,K,EAAO;AAAA,wBACE,KAAKf,KADP;AAAA,UACfa,KADe,eACfA,KADe;AAAA,UACRJ,KADQ,eACRA,KADQ;AAErB,UAAIN,KAAK,GAAG,KAAKF,KAAL,CAAWE,KAAvB;;AAFqB,6BAGRY,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBL,GAAjB,CAAqBM,MAArB,CAHQ;AAAA;AAAA,UAGhBC,CAHgB;AAAA,UAGbC,CAHa;;AAMrB,eAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGN,KAAd,IAAuBK,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGT,KAAzC,EAAgD;AAC9CN,UAAAA,KAAK,CAACe,CAAD,CAAL,CAASC,CAAT,IAAc,CAAChB,KAAK,CAACe,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,OAZoB,CAcrB;AAEA;AACA;AAEA;;AACD;AAGD;;;;6BAES;AACP,WAAI,IAAIE,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAG,KAAKrB,KAAL,CAAWS,KAA9B;AACA,eACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AADA,OADO,CAOP;AAEA;AAEA;AAEA;;AACD;;;;EAzEiBZ,S;;AAAdE,K,CAEGuB,Y,GAAe;AACpBb,EAAAA,KAAK,EAAE,CADa;AAEpBI,EAAAA,KAAK,EAAE,CAFa;AAGpBN,EAAAA,aAAa,EAAE;AAHK,C;AA2ExB,eAAeR,KAAf","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightOn: 0.25,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    }\n\n    // TODO: set initial state\n  }\n\n  rando() {\n    return Math.random() >= this.props.chanceLightOn;\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = Array(this.props.nrows).fill().map(_ =>\n      Array(this.props.ncols).fill().map(_ => this.rando()));\n    return board;\n  }\n\n\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    //this.setState({ board, hasWon });\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    for(let i = 0; i < this.props.nrows;)\n    return (\n      <table>\n\n      </table>\n    )\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}