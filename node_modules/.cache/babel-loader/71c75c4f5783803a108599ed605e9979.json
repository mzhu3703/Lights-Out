{"ast":null,"code":"import _slicedToArray from \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board = /*#__PURE__*/function (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props));\n    _this.state = {\n      hasWon: false,\n      board: _this.createBoard()\n    };\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this))); // TODO: set initial state\n\n    return _this;\n  }\n\n  _createClass(Board, [{\n    key: \"rando\",\n    value: function rando() {\n      return Math.random() >= this.props.chanceLightOn;\n    }\n    /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  }, {\n    key: \"createBoard\",\n    value: function createBoard() {\n      var _this2 = this;\n\n      var board = Array(this.props.nrows).fill().map(function (_) {\n        return Array(_this2.props.ncols).fill().map(function (_) {\n          return _this2.rando();\n        });\n      });\n      return board;\n    }\n  }, {\n    key: \"fakeBoard\",\n    value: function fakeBoard() {\n      var _this3 = this;\n\n      var fakeBoard = Array(this.props.nrows).fill().map(function (_) {\n        return Array(_this3.props.ncols).fill().map(function (_) {\n          return false;\n        });\n      });\n      return fakeBoard;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      }\n\n      flipCell(y, x);\n      flipCell(y - 1, x);\n      flipCell(y + 1, x);\n      flipCell(y, x - 1);\n      flipCell(y, x + 1); // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n      if (this.state.board == this.fakeBoard()) {\n        console.log(i);\n      }\n\n      this.setState({\n        board: board\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this4 = this;\n\n      var tblBoard = [];\n\n      for (var _i = 0; _i < this.props.nrows; _i++) {\n        var cellArray = [];\n\n        var _loop = function _loop(j) {\n          var coord = \"\".concat(_i, \"-\").concat(j);\n          cellArray.push(React.createElement(Cell, {\n            location: coord,\n            flipCellsAroundMe: function flipCellsAroundMe() {\n              return _this4.flipCellsAround(coord);\n            },\n            key: coord,\n            isLit: _this4.state.board[_i][j],\n            __self: _this4,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 24\n            }\n          }));\n        };\n\n        for (var j = 0; j < this.props.ncols; j++) {\n          _loop(j);\n        }\n\n        tblBoard.push(React.createElement(\"tr\", {\n          key: 1,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 21\n          }\n        }, cellArray));\n      }\n\n      return React.createElement(\"table\", {\n        className: \"Board\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 7\n        }\n      }, React.createElement(\"tbody\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 9\n        }\n      }, tblBoard)); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  nrows: 5,\n  ncols: 5,\n  chanceLightOn: 0.25\n};\nexport default Board;","map":{"version":3,"sources":["/home/michael/Downloads/react-bootcamp-materials/12-lights-out-game/react-lights-out-starter/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","board","createBoard","flipCellsAround","bind","Math","random","chanceLightOn","Array","nrows","fill","map","_","ncols","rando","fakeBoard","coord","split","Number","y","x","flipCell","console","log","i","setState","tblBoard","cellArray","j","push","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Cell from \"./Cell\";\nimport './Board.css';\n\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  static defaultProps = {\n    nrows: 5,\n    ncols: 5,\n    chanceLightOn: 0.25,\n  }\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasWon: false,\n      board: this.createBoard(),\n    }\n    this.flipCellsAround = this.flipCellsAround.bind(this);\n\n    // TODO: set initial state\n  }\n\n  rando() {\n    return Math.random() >= this.props.chanceLightOn;\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n\n  createBoard() {\n    let board = Array(this.props.nrows).fill().map(_ =>\n      Array(this.props.ncols).fill().map(_ => this.rando()));\n    return board;\n  }\n  fakeBoard(){\n    let fakeBoard = Array(this.props.nrows).fill().map(_ =>\n      Array(this.props.ncols).fill().map(_ => false));\n    return fakeBoard;\n  }\n\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let { ncols, nrows } = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n    flipCell(y,x);\n    flipCell(y-1,x)\n    flipCell(y+1,x)\n    flipCell(y,x-1)\n    flipCell(y,x+1)\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n    if(this.state.board == this.fakeBoard()){\n      console.log(i)\n    }\n    \n    this.setState({ board: board });\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    let tblBoard = [];\n    for (let i = 0; i < this.props.nrows; i++) {\n      let cellArray = [];\n      for (let j = 0; j < this.props.ncols; j++) {\n        let coord = `${i}-${j}`;\n        cellArray.push(<Cell location = {coord} flipCellsAroundMe = {() => this.flipCellsAround(coord)} key = {coord} isLit = {this.state.board[i][j]}/>)\n        \n      }\n      tblBoard.push(<tr key = {1}>{cellArray}</tr>);\n      \n    }\n    \n    return (\n      <table className=\"Board\">\n        <tbody>\n            {tblBoard}\n        </tbody>\n      </table>\n    )\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}